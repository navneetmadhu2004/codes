//BANKERS ALGORITHM

#include<stdio.h>
#include<stdbool.h>
struct bank
{
    int max,alloc,need;
};
int main()
{
    int n,r;
    printf("enter the no. of pros");
    scanf("%d",&n);
    printf("enter the number of resources");
    scanf("%d",&r);
    struct bank a[10][10];
    printf("enter the max matrix\n");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<r;j++)
        {
            scanf("%d",&a[i][j].max);
        }
        printf("\n");
    }
    printf("enter the allocation matrix\n");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<r;j++)
        {
            scanf("%d",&a[i][j].alloc);
        }
         printf("\n");
    }
    int avail[10];
    printf("enter the available resources\n");
        for(int j=0;j<r;j++)
        {
            scanf("%d",&avail[j]);
        }
         printf("\n");
    
    //calculating need matrix
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<r;j++)
        {
            a[i][j].need=a[i][j].max-a[i][j].alloc;
        }
    }
    printf("Need Matrix:\n");
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<r;j++)
        {
          printf("%d\t",a[i][j].need);
        }
        printf("\n");
    }
    int count=0,y=0,pro[5];
    bool cmplt[5] = {false, false, false, false, false};
 while(y<n)
 {
   for(int i=0;i<n;i++)
   {
    if(cmplt[i])
    {
        continue;
    }    
        count=0;
        for(int j=0;j<r;j++)
        {
          if(a[i][j].need<=avail[j])
          {
            count++;
          }
        }
        if(count==r)
        {
            cmplt[i]=true;
            pro[y++]=i;
                for(int j=0;j<r;j++)
                {
                  avail[j]=avail[j]+a[i][j].alloc;
                  
                
                }
              
        }
        
        
   }
 }
 printf("sequence:\n");
 for(int i=0;i<n;i++)
 {
    printf("P%d->",pro[i]);
 }
 printf("\nfinal available matrix:\n");
 for(int i=0;i<r;i++)
 {
    printf("%d\t",avail[i]);
    
 }
 return 0;
}

//LRU PAGE REPLACEMENT

#include<stdio.h>

void main() {
    int frame;
    int string[10], n;
    int hit = 0, miss = 0;
    int found = 0;   
    printf("Enter the frame size: ");
    scanf("%d", &frame);
    int page[frame];
    int age[frame];   
    for (int i = 0; i < frame; i++) {
        page[i] = -1; 
        age[i] = -1;                                             
    }  
    printf("Enter the number of pages: ");
    scanf("%d", &n);  
    printf("Enter the string: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &string[i]);
    }  
    for (int i = 0; i < n; i++) {
        found = 0;
        for (int j = 0; j < frame; j++) {
            if (string[i] == page[j]) {
                hit++;
                found = 1;
                age[j] = i; // Update age to current time
                break;
            }
        }      
        if (found == 0) {
            int lru_index = 0;
            for (int j = 1; j < frame; j++) {
                if (age[j] < age[lru_index]) {
                    lru_index = j;
                }
            }        
            page[lru_index] = string[i];
            age[lru_index] = i; // Update age to current time
            miss++;
        }
    }
    printf("Miss = %d and Hit = %d\n", miss, hit);
    for (int i = 0; i < frame; i++) {
        if (page[i] != -1)
            printf("%d\t", page[i]);
        else
            printf("X\t"); // Empty frame
    }
    printf("\n");
}




